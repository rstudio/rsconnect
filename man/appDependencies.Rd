% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/appDependencies.R
\name{appDependencies}
\alias{appDependencies}
\title{Detect application dependencies}
\usage{
appDependencies(appDir = getwd(), appFiles = NULL)
}
\arguments{
\item{appDir}{Directory containing application. Defaults to current working
directory.}

\item{appFiles}{A character vector giving relative paths to the files to
include in the deployed bundle.}
}
\value{
A data frame with columns:
\itemize{
\item \code{Package}: package name.
\item \code{Version}: local version.
\item \code{Source}: where the package was installed from.
\item \code{Repository}: for CRAN and CRAN-like repositories, the url to the
repo.
}
}
\description{
\code{appDependencies()} recursively detects all R package dependencies for an
application by parsing all \code{.R} and \code{.Rmd} files and looking for calls
to \code{library()}, \code{require()}, \code{requireNamespace()}, \code{::}, and so on.
It then adds implicit dependencies (i.e. an \code{.Rmd} requires Rmarkdown)
and adds all recursive dependencies to create a complete manifest of
package packages need to be installed to run the app.
}
\section{Remote installation}{
When deployed, the app must first install all of these packages, and
rsconnect does its best to ensure that all the packages have the same
version as you are running locally. It knows how to install packages from
the following sources:
\itemize{
\item CRAN (\code{CRAN}) and CRAN-like repositories (\code{CustomCRANLikeRepository}).
\item BioConductor (\code{Bioconductor})
\item Packages installed from GitHub (\code{github}), GitLab (\code{gitlab}), or
BitBucket (\code{bitbucket}).
}

It does not know how to install packages that you have built and installed
locally so if you attempt to deploy an app that depends on such a package
it will fail. To resolve this issue, you'll need to install from a known
source.
}

\section{Suggested packages}{
The \code{Suggests} field is not included when determining recursive dependencies,
so it's possible that not every package required to run your application will
be detected.

For example, ggplot2's \code{geom_hex()} requires the hexbin package to be
installed, but it is only suggested by ggplot2. So if you app uses
\code{geom_hex()} it will fail, reporting that the hexbin package is not
installed.

You can overcome this problem with (e.g.) \code{requireNamespace(hexbin)}.
This will tell rsconnect that your app needs the hexbin package, without
otherwise affecting your code.
}

\examples{
\dontrun{

# dependencies for the app in the current working dir
appDependencies()

# dependencies for an app in another directory
appDependencies("~/projects/shiny/app1")
}
}
\seealso{
\link{rsconnectPackages}(Using Packages with rsconnect)
}
