% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/deployApp.R
\name{deployApp}
\alias{deployApp}
\title{Deploy an Application}
\usage{
deployApp(
  appDir = getwd(),
  appFiles = NULL,
  appFileManifest = NULL,
  appPrimaryDoc = NULL,
  appSourceDoc = NULL,
  appName = NULL,
  appTitle = NULL,
  appId = NULL,
  contentCategory = NULL,
  account = NULL,
  server = NULL,
  upload = TRUE,
  recordDir = NULL,
  launch.browser = getOption("rsconnect.launch.browser", interactive()),
  on.failure = NULL,
  logLevel = c("normal", "quiet", "verbose"),
  lint = TRUE,
  metadata = list(),
  forceUpdate = getOption("rsconnect.force.update.apps", FALSE),
  python = NULL,
  forceGeneratePythonEnvironment = FALSE,
  quarto = NULL,
  appVisibility = NULL,
  image = NULL
)
}
\arguments{
\item{appDir}{A directory containing an application (e.g. a Shiny app
or plumber API). Defaults to the current directory.}

\item{appFiles}{A character vector given relative paths to the files and
directories to bundle and deploy. The default, \code{NULL}, will include all
files in \code{appDir}, apart from any listed in an \code{.rscignore} file.
See \code{\link[=listBundleFiles]{listBundleFiles()}} for more details.}

\item{appFileManifest}{An alternate way to specify the files to be deployed.
Should be a path to a file that contains the names of the files and
directories to deploy, one per line, relative to \code{appDir}.}

\item{appPrimaryDoc}{If the application contains more than one document, this
parameter indicates the primary one, as a path relative to \code{appDir}. Can be
\code{NULL}, in which case the primary document is inferred from the contents
being deployed.}

\item{appSourceDoc}{\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#deprecated}{\figure{lifecycle-deprecated.svg}{options: alt='[Deprecated]'}}}{\strong{[Deprecated]}} Please use
\code{recordDir} instead.}

\item{appName}{Application name, a string consisting of letters, numbers,
\verb{_} and \code{-}. The application name is used to identify applications on a
server, so much be unique.

If not specified, the first deployment will be automatically it from the
\code{appDir} for directory and website, and from the \code{appPrimaryDoc} for
document. On subsequent deploys, it will use the previously stored value.}

\item{appTitle}{Free-form descriptive title of application. Optional; if
supplied, will often be displayed in favor of the name. If ommitted,
on second and subsequent deploys, the title will be unchanged.}

\item{appId}{If updating an application, the ID of the application being
updated. For shinyapps.io, this the \code{id} listed on your applications
page. For Posit Connect, this is the \code{guid} that you can find on the
info tab on the content page. Generally, you should not need to supply
this as it will be automatically taken from the deployment record on disk.}

\item{contentCategory}{Optional; the kind of content being deployed (e.g.
\code{"plot"} or \code{"site"}).}

\item{account, server}{Uniquely identify a remote server with either your
user \code{account}, the \code{server} name, or both. If neither are supplied, and
there are multiple options, you'll be prompted to pick one.

Use \code{\link[=accounts]{accounts()}} to see the full list of available options.}

\item{upload}{If \code{TRUE} (the default) then the application is uploaded from
the local system prior to deployment. If \code{FALSE} then it is re-deployed
using the last version that was uploaded. \code{FALSE} is only supported on
shinyapps.io; \code{TRUE} is required on Posit Connect.}

\item{recordDir}{Directory where deployment record is written. The default,
\code{NULL}, uses \code{appDir}, since this is usually where you want the deployment
data to be stored. This argument is typically only needed when deploying
a directory of static files since you want to store the record with the
code that generated those files, not the files themselves.}

\item{launch.browser}{If true, the system's default web browser will be
launched automatically after the app is started. Defaults to \code{TRUE} in
interactive sessions only. If a function is passed, it will be called
after the app is started, with the app URL as a paramter.}

\item{on.failure}{Function to be called if the deployment fails. If a
deployment log URL is available, it's passed as a parameter.}

\item{logLevel}{One of \code{"quiet"}, \code{"normal"} or \code{"verbose"}; indicates how
much logging to the console is to be performed. At \code{"quiet"} reports no
information; at \code{"verbose"}, a full diagnostic log is captured.}

\item{lint}{Lint the project before initiating deployment, to identify
potentially problematic code?}

\item{metadata}{Additional metadata fields to save with the deployment
record. These fields will be returned on subsequent calls to
\code{\link[=deployments]{deployments()}}.}

\item{forceUpdate}{What should happen if there's no deployment record for
the app, but there's an app with the same name on the server? If \code{TRUE},
will always update the previously-deployed app. If \code{FALSE}, will ask
the user what to do, or fail if not in an interactive context.

Defaults to the value of \code{getOption("rsconnect.force.update.apps", FALSE)}.}

\item{python}{Full path to a python binary for use by \code{reticulate}.
Required if \code{reticulate} is a dependency of the app being deployed.
If python = NULL, and RETICULATE_PYTHON or RETICULATE_PYTHON_FALLBACK is
set in the environment, its value will be used. The specified python binary
will be invoked to determine its version and to list the python packages
installed in the environment.}

\item{forceGeneratePythonEnvironment}{Optional. If an existing
\code{requirements.txt} file is found, it will be overwritten when this argument
is \code{TRUE}.}

\item{quarto}{Optional. Full path to a Quarto binary for use deploying Quarto
content. The provided Quarto binary will be used to run \verb{quarto inspect}
to gather information about the content.}

\item{appVisibility}{One of \code{NULL}, \code{"private"}, or \code{"public"}; the
visibility of the deployment. When \code{NULL}, no change to visibility is
made. Currently has an effect only on deployments to shinyapps.io.}

\item{image}{Optional. The name of the image to use when building and
executing this content. If none is provided, Posit Connect will
attempt to choose an image based on the content requirements.}
}
\description{
Deploy a \link[shiny:shiny-package]{shiny} application, an
\link[rmarkdown:rmarkdown-package]{RMarkdown} document, a plumber API, or HTML
content to a server.
}
\details{
\subsection{Updating existing apps}{

If you have previously deployed an app, \code{deployApp()} will do its best to
update the existing deployment. In the simple case where you have only one
deployment in \code{appDir}, this should just work with the default arguments.
If you want multiple deployments to the same server, supply \code{appName}.
If you want multiple deployments to different servers, use \code{account} and/or
\code{server}.

The metadata needs to make this work is stored in the \verb{rsconnect/} directory
beneath \code{appDir}. You should generally check these files into version
control to ensure that future you and other collaborators will publish
to the same location.
}
}
\examples{
\dontrun{

# deploy the application in the current working dir
deployApp()

# deploy an application in another directory
deployApp("~/projects/shiny/app1")

# deploy using an alternative application name and title
deployApp("~/projects/shiny/app1", appName = "myapp",
          appTitle = "My Application")

# deploy specifying an explicit account name, then
# redeploy with no arguments (will automatically use
# the previously specified account)
deployApp(account = "jsmith")
deployApp()

# deploy but don't launch a browser when completed
deployApp(launch.browser = FALSE)

# deploy a Quarto website, using the quarto package to
# find the Quarto binary
deployApp("~/projects/quarto/site1", quarto = quarto::quarto_path())
}
}
\seealso{
\code{\link[=applications]{applications()}}, \code{\link[=terminateApp]{terminateApp()}}, and \code{\link[=restartApp]{restartApp()}}

Other Deployment functions: 
\code{\link{applications}()},
\code{\link{deployAPI}()},
\code{\link{deployDoc}()},
\code{\link{deploySite}()},
\code{\link{deployTFModel}()}
}
\concept{Deployment functions}
